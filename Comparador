<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Comparador de Frete - Google Sheets x XML CTE</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
            line-height: 1.6;
        }
        .container {
            display: flex;
            gap: 20px;
            margin-top: 20px;
        }
        .panel {
            flex: 1;
            padding: 15px;
            border: 1px solid #ccc;
            border-radius: 5px;
        }
        button {
            background-color: #4CAF50;
            color: white;
            padding: 10px 15px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            margin-right: 10px;
            margin-top: 10px;
        }
        button:hover {
            background-color: #45a049;
        }
        button:disabled {
            background-color: #cccccc;
            cursor: not-allowed;
        }
        table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 20px;
        }
        th, td {
            border: 1px solid #ddd;
            padding: 8px;
            text-align: left;
        }
        th {
            background-color: #f2f2f2;
        }
        .result-row.match {
            background-color: #d4edda;
        }
        .result-row.mismatch {
            background-color: #f8d7da;
        }
        .loading {
            color: #007bff;
        }
        .error {
            color: #dc3545;
        }
        .success {
            color: #28a745;
        }
        .tabs {
            display: flex;
            margin-bottom: 15px;
        }
        .tab {
            padding: 10px 15px;
            background-color: #f1f1f1;
            cursor: pointer;
            border: 1px solid #ccc;
            border-bottom: none;
            margin-right: 5px;
        }
        .tab.active {
            background-color: white;
            border-bottom: 1px solid white;
        }
        .tab-content {
            display: none;
            border: 1px solid #ccc;
            padding: 15px;
        }
        .tab-content.active {
            display: block;
        }
        #statusMessage {
            margin: 10px 0;
            padding: 10px;
            border-radius: 4px;
        }
    </style>
</head>
<body>
    <h1>Comparador de Frete - Google Sheets x XML CTE</h1>
    
    <div class="tabs">
        <div class="tab active" onclick="openTab(event, 'instrucoes')">Instruções</div>
        <div class="tab" onclick="openTab(event, 'config')">Configuração</div>
        <div class="tab" onclick="openTab(event, 'carregar')">Carregar XMLs</div>
        <div class="tab" onclick="openTab(event, 'resultados')">Resultados</div>
    </div>

    <div id="instrucoes" class="tab-content active">
        <h2>Como usar:</h2>
        <ol>
            <li>Na aba "Configuração", insira sua Google API Key (obrigatório)</li>
            <li>Clique em "Carregar Dados da Planilha"</li>
            <li>Na aba "Carregar XMLs", selecione os arquivos XML dos CT-e</li>
            <li>Clique em "Processar Comparação"</li>
            <li>Veja os resultados na aba "Resultados"</li>
        </ol>
        
        <div style="background-color: #f8f9fa; padding: 15px; border-radius: 5px; margin: 20px 0;">
            <h3>⚙️ Como obter sua Google API Key:</h3>
            <ol>
                <li>Acesse <a href="https://console.cloud.google.com/" target="_blank">Google Cloud Console</a></li>
                <li>Crie um projeto ou selecione um existente</li>
                <li>Ative a "Google Sheets API"</li>
                <li>Vá em "Credentials" > "Create Credentials" > "API Key"</li>
                <li>Copie a chave e cole abaixo</li>
            </ol>
        </div>
    </div>

    <div id="config" class="tab-content">
        <h2>Configuração</h2>
        <label for="apiKey">Google API Key (obrigatório):</label><br>
        <input type="text" id="apiKey" size="60" placeholder="Cole sua Google API Key aqui"><br><br>
        
        <label for="spreadsheetId">ID da Planilha (default preenchido):</label><br>
        <input type="text" id="spreadsheetId" size="60" 
               value="1CZZgYJiZic9pyFFTdyldm_gVwn2K-zSGY9uhFJ5Nz6Q"><br><br>
        
        <label for="sheetGid">GID da aba (default preenchido):</label><br>
        <input type="text" id="sheetGid" size="20" value="1183141602"><br><br>
        
        <button onclick="carregarDadosPlanilha()">Carregar Dados da Planilha</button>
        <div id="statusMessage"></div>
    </div>

    <div id="carregar" class="tab-content">
        <h2>Carregar XMLs dos CT-e</h2>
        <div class="file-input-container">
            <label for="xmlFiles">Selecione os arquivos XML:</label><br>
            <input type="file" id="xmlFiles" multiple accept=".xml">
        </div>
        
        <button onclick="processarComparacao()" id="btnProcessar" disabled>Processar Comparação</button>
        <button onclick="limparTudo()">Limpar Tudo</button>
    </div>

    <div id="resultados" class="tab-content">
        <h2>Resultados da Comparação</h2>
        <div id="resultadosContainer">
            <p>Ainda não há resultados. Carregue os dados da planilha e os XMLs para começar.</p>
        </div>
    </div>

    <script>
        let dadosPlanilhaAgrupados = null;
        
        function openTab(evt, tabName) {
            var i, tabcontent, tablinks;
            tabcontent = document.getElementsByClassName("tab-content");
            for (i = 0; i < tabcontent.length; i++) {
                tabcontent[i].className = tabcontent[i].className.replace(" active", "");
            }
            tablinks = document.getElementsByClassName("tab");
            for (i = 0; i < tablinks.length; i++) {
                tablinks[i].className = tablinks[i].className.replace(" active", "");
            }
            document.getElementById(tabName).className += " active";
            evt.currentTarget.className += " active";
        }

        function limparTudo() {
            document.getElementById('apiKey').value = '';
            document.getElementById('xmlFiles').value = '';
            dadosPlanilhaAgrupados = null;
            document.getElementById('btnProcessar').disabled = true;
            document.getElementById('resultadosContainer').innerHTML = '<p>Ainda não há resultados.</p>';
            document.getElementById('statusMessage').innerHTML = '';
        }
        
        async function carregarDadosPlanilha() {
            const apiKey = document.getElementById('apiKey').value.trim();
            const spreadsheetId = document.getElementById('spreadsheetId').value.trim();
            const sheetGid = document.getElementById('sheetGid').value.trim();
            
            if (!apiKey) {
                mostrarStatus("Chave API é obrigatória!", "error");
                return;
            }
            
            if (!spreadsheetId) {
                mostrarStatus("ID da planilha é obrigatório!", "error");
                return;
            }
            
            mostrarStatus("Carregando dados da planilha...", "loading");
            
            try {
                // Montar o range: vamos buscar da linha 2 em diante, assumindo que linha 1 é cabeçalho
                // Colunas: A, E, H, J, K → "A:E,H:K" mas como são colunas não contíguas, melhor buscar tudo e filtrar
                // Vamos buscar da coluna A até K
                const range = `gid=${sheetGid}`; // Não é usado diretamente, vamos usar o nome da aba se possível
                
                // Primeiro, obter metadados para descobrir o nome da aba
                const urlMetadata = `https://sheets.googleapis.com/v4/spreadsheets/${spreadsheetId}?key=${apiKey}`;
                const responseMetadata = await fetch(urlMetadata);
                const dataMetadata = await responseMetadata.json();
                
                if (!responseMetadata.ok) {
                    throw new Error(dataMetadata.error?.message || 'Erro ao carregar metadados da planilha');
                }
                
                // Encontrar a aba com o gid especificado
                const sheet = dataMetadata.sheets.find(s => s.properties.sheetId == sheetGid);
                if (!sheet) {
                    throw new Error(`Aba com gid ${sheetGid} não encontrada`);
                }
                const sheetName = sheet.properties.title;
                
                // Agora buscar os dados
                const rangeWithData = `'${encodeURIComponent(sheetName)}'!A:K`;
                const url = `https://sheets.googleapis.com/v4/spreadsheets/${spreadsheetId}/values/${rangeWithData}?key=${apiKey}`;
                
                const response = await fetch(url);
                const data = await response.json();
                
                if (!response.ok) {
                    throw new Error(data.error?.message || 'Erro ao carregar dados da planilha');
                }
                
                if (!data.values || data.values.length < 2) {
                    throw new Error('Nenhum dado encontrado na planilha');
                }
                
                // Processar os dados
                dadosPlanilhaAgrupados = processarDadosDaPlanilha(data.values);
                
                // Habilitar botão de processar
                document.getElementById('btnProcessar').disabled = false;
                
                mostrarStatus(`Dados carregados com sucesso! ${dadosPlanilhaAgrupados.length} registros agrupados.`, "success");
                
                // Mudar para aba de carregar XMLs
                openTab({currentTarget: document.querySelector('.tab:nth-child(3)')}, 'carregar');
                
            } catch (error) {
                console.error("Erro:", error);
                mostrarStatus(`Erro: ${error.message}`, "error");
            }
        }
        
        function mostrarStatus(mensagem, tipo) {
            const statusDiv = document.getElementById('statusMessage');
            statusDiv.innerHTML = mensagem;
            statusDiv.className = tipo;
        }
        
        function processarDadosDaPlanilha(valores) {
            // Valores é um array de arrays, onde cada subarray é uma linha
            const cabecalho = valores[0];
            
            // Mapear índices das colunas que precisamos
            const indices = {
                 -1,
                frete: -1,
                placa: -1,
                peso: -1,
                nf: -1
            };
            
            cabecalho.forEach((col, index) => {
                if (index === 0) indices.data = 0; // Coluna A
                if (index === 4) indices.frete = 4; // Coluna E
                if (index === 7) indices.placa = 7; // Coluna H
                if (index === 9) indices.peso = 9; // Coluna J
                if (index === 10) indices.nf = 10; // Coluna K
            });
            
            // Verificar se todas as colunas necessárias estão presentes
            if (indices.data === -1 || indices.frete === -1 || indices.placa === -1 || 
                indices.peso === -1 || indices.nf === -1) {
                throw new Error("Colunas necessárias não encontradas. Verifique se a planilha tem as colunas A, E, H, J, K.");
            }
            
            // Processar linhas (a partir da linha 2, índice 1)
            const dadosProcessados = [];
            for (let i = 1; i < valores.length; i++) {
                const linha = valores[i];
                if (!linha || linha.length === 0) continue;
                
                // Extrair valores
                const data = linha[indices.data] ? linha[indices.data].toString().trim() : '';
                let freteStr = linha[indices.frete] ? linha[indices.frete].toString().trim() : '0';
                const placa = linha[indices.placa] ? linha[indices.placa].toString().trim() : '';
                let pesoStr = linha[indices.peso] ? linha[indices.peso].toString().trim() : '0';
                let nf = linha[indices.nf] ? linha[indices.nf].toString().trim() : '';
                
                // Processar NF: remover "NF" e manter só números
                nf = nf.replace(/[^0-9]/g, '');
                
                // Processar frete: remover R$, pontos, substituir vírgula por ponto
                freteStr = freteStr.replace(/[R$\s.]/g, '').replace(',', '.');
                const frete = parseFloat(freteStr) || 0;
                
                // Processar peso: substituir vírgula por ponto
                pesoStr = pesoStr.replace(/\./g, '').replace(',', '.');
                const peso = parseFloat(pesoStr) || 0;
                
                // Ignorar linhas sem data, placa ou NF
                if (!data || !placa || !nf) continue;
                
                dadosProcessados.push({
                    data: data,
                    frete: frete,
                    placa: placa,
                    peso: peso,
                    nf: nf
                });
            }
            
            // Agrupar por data, placa e NF
            const agrupados = {};
            dadosProcessados.forEach(item => {
                const chave = `${item.data}|${item.placa}|${item.nf}`;
                if (!agrupados[chave]) {
                    agrupados[chave] = {
                        data: item.data,
                        placa: item.placa,
                        nf: item.nf,
                        pesoTotal: 0,
                        freteOriginal: 0,
                        valorCalculado: 0,
                        itens: []
                    };
                }
                agrupados[chave].pesoTotal += item.peso;
                agrupados[chave].freteOriginal += item.frete;
                agrupados[chave].itens.push(item);
            });
            
            // Calcular valor final (frete / 0.92)
            Object.values(agrupados).forEach(item => {
                item.valorCalculado = item.freteOriginal / 0.92;
            });
            
            return Object.values(agrupados);
        }
        
        function processarComparacao() {
            const xmlFiles = document.getElementById('xmlFiles').files;
            
            if (xmlFiles.length === 0) {
                alert('Por favor, selecione pelo menos um arquivo XML.');
                return;
            }
            
            if (!dadosPlanilhaAgrupados) {
                alert('Dados da planilha não carregados. Carregue primeiro os dados da planilha.');
                return;
            }
            
            // Processar XMLs
            processarXMLs(xmlFiles, dadosPlanilhaAgrupados);
        }
        
        function processarXMLs(xmlFiles, dadosPlanilha) {
            const leitor = new FileReader();
            let xmlIndex = 0;
            const resultadosXML = [];
            
            function processarProximoXML() {
                if (xmlIndex >= xmlFiles.length) {
                    // Todos processados, mostrar resultados
                    mostrarResultados(dadosPlanilha, resultadosXML);
                    return;
                }
                
                const arquivo = xmlFiles[xmlIndex];
                leitor.onload = function(e) {
                    try {
                        const xmlContent = e.target.result;
                        const parser = new DOMParser();
                        const xmlDoc = parser.parseFromString(xmlContent, "text/xml");
                        
                        // Extrair dados do XML CTE
                        let chaveCTe = '';
                        let valorFrete = 0;
                        let placa = '';
                        let dataEmissao = '';
                        let nfReferenciada = '';
                        
                        // Tentar diferentes namespaces e estruturas
                        const namespaces = ["", "nfe:", "cte:"];
                        
                        // Procurar chave do CTe
                        for (const ns of namespaces) {
                            const infCte = xmlDoc.querySelector(`${ns}infCte`);
                            if (infCte) {
                                chaveCTe = infCte.getAttribute('Id') || '';
                                if (chaveCTe.startsWith('CTe')) {
                                    chaveCTe = chaveCTe.substring(3);
                                }
                                break;
                            }
                        }
                        
                        // Procurar valor do frete
                        for (const ns of namespaces) {
                            const vFrete = xmlDoc.querySelector(`${ns}vFrete`);
                            if (vFrete && vFrete.textContent) {
                                valorFrete = parseFloat(vFrete.textContent.replace(',', '.')) || 0;
                                break;
                            }
                        }
                        
                        // Procurar placa
                        for (const ns of namespaces) {
                            const placaEl = xmlDoc.querySelector(`${ns}placa`);
                            if (placaEl && placaEl.textContent) {
                                placa = placaEl.textContent.trim();
                                break;
                            }
                        }
                        
                        // Procurar data de emissão
                        for (const ns of namespaces) {
                            const dhEmi = xmlDoc.querySelector(`${ns}dhEmi`);
                            if (dhEmi && dhEmi.textContent) {
                                const data = new Date(dhEmi.textContent);
                                dataEmissao = data.toISOString().split('T')[0];
                                break;
                            }
                        }
                        
                        // Procurar nota fiscal referenciada
                        for (const ns of namespaces) {
                            let nfeRef = xmlDoc.querySelector(`${ns}refNFe`) || 
                                       xmlDoc.querySelector(`${ns}chaveNFe`);
                            
                            if (nfeRef && nfeRef.textContent) {
                                nfReferenciada = nfeRef.textContent.trim();
                                // Extrair apenas os números
                                nfReferenciada = nfReferenciada.replace(/[^0-9]/g, '');
                                // Se tiver mais de 10 dígitos, pegar os últimos 10 (número da NF)
                                if (nfReferenciada.length > 10) {
                                    nfReferenciada = nfReferenciada.slice(-10);
                                }
                                break;
                            }
                        }
                        
                        resultadosXML.push({
                            arquivo: arquivo.name,
                            chaveCTe: chaveCTe,
                            valorFrete: valorFrete,
                            placa: placa,
                            dataEmissao: dataEmissao,
                            nfReferenciada: nfReferenciada,
                            xmlContent: xmlContent
                        });
                        
                        xmlIndex++;
                        processarProximoXML();
                    } catch (error) {
                        console.error('Erro ao processar XML:', arquivo.name, error);
                        xmlIndex++;
                        processarProximoXML();
                    }
                };
                
                leitor.readAsText(arquivo, 'UTF-8');
            }
            
            // Iniciar processamento
            processarProximoXML();
        }
        
        function mostrarResultados(dadosPlanilha, resultadosXML) {
            let html = `
                <h3>Resumo dos Dados Processados</h3>
                <p><strong>Dados da Planilha:</strong> ${dadosPlanilha.length} registros agrupados</p>
                <p><strong>XMLs Processados:</strong> ${resultadosXML.length} arquivos</p>
                
                <h3>Comparação Detalhada</h3>
                <table>
                    <thead>
                        <tr>
                            <th>Data</th>
                            <th>Placa</th>
                            <th>NF</th>
                            <th>Peso Total</th>
                            <th>Frete Planilha</th>
                            <th>Valor Calculado (÷0.92)</th>
                            <th>Frete XML</th>
                            <th>Diferença</th>
                            <th>Status</th>
                            <th>Arquivo XML</th>
                        </tr>
                    </thead>
                    <tbody>
            `;
            
            // Para cada registro da planilha, procurar correspondente no XML
            dadosPlanilha.forEach(registroPlanilha => {
                let xmlCorrespondente = null;
                
                // Procurar por correspondência (data, placa e NF)
                for (const xml of resultadosXML) {
                    const dataMatch = !xml.dataEmissao || xml.dataEmissao === registroPlanilha.data;
                    const placaMatch = !xml.placa || xml.placa === registroPlanilha.placa;
                    const nfMatch = !xml.nfReferenciada || xml.nfReferenciada === registroPlanilha.nf;
                    
                    if (dataMatch && placaMatch && nfMatch) {
                        xmlCorrespondente = xml;
                        break;
                    }
                }
                
                const valorCalculado = registroPlanilha.valorCalculado;
                const valorXML = xmlCorrespondente ? xmlCorrespondente.valorFrete : 0;
                const diferenca = valorCalculado - valorXML;
                const status = xmlCorrespondente ? 
                    (Math.abs(diferenca) < 0.01 ? 'OK' : 'DIVERGÊNCIA') : 
                    'NÃO ENCONTRADO';
                
                const className = xmlCorrespondente ? 
                    (Math.abs(diferenca) < 0.01 ? 'result-row match' : 'result-row mismatch') : 
                    'result-row mismatch';
                
                html += `
                    <tr class="${className}">
                        <td>${registroPlanilha.data}</td>
                        <td>${registroPlanilha.placa}</td>
                        <td>${registroPlanilha.nf}</td>
                        <td>${registroPlanilha.pesoTotal.toFixed(2)} kg</td>
                        <td>R$ ${registroPlanilha.freteOriginal.toFixed(2)}</td>
                        <td>R$ ${valorCalculado.toFixed(2)}</td>
                        <td>${xmlCorrespondente ? 'R$ ' + valorXML.toFixed(2) : '-'}</td>
                        <td>${xmlCorrespondente ? 'R$ ' + Math.abs(diferenca).toFixed(2) : '-'}</td>
                        <td>${status}</td>
                        <td>${xmlCorrespondente ? xmlCorrespondente.arquivo : '-'}</td>
                    </tr>
                `;
            });
            
            html += `
                    </tbody>
                </table>
                
                <h3>Estatísticas</h3>
                <ul>
                    <li>Registros com correspondência exata: ${dadosPlanilha.filter(r => {
                        return resultadosXML.some(xml => {
                            const dataMatch = !xml.dataEmissao || xml.dataEmissao === r.data;
                            const placaMatch = !xml.placa || xml.placa === r.placa;
                            const nfMatch = !xml.nfReferenciada || xml.nfReferenciada === r.nf;
                            return dataMatch && placaMatch && nfMatch;
                        });
                    }).length}</li>
                    <li>Registros sem correspondência: ${dadosPlanilha.filter(r => {
                        return !resultadosXML.some(xml => {
                            const dataMatch = !xml.dataEmissao || xml.dataEmissao === r.data;
                            const placaMatch = !xml.placa || xml.placa === r.placa;
                            const nfMatch = !xml.nfReferenciada || xml.nfReferenciada === r.nf;
                            return dataMatch && placaMatch && nfMatch;
                        });
                    }).length}</li>
                    <li>Valor total calculado (planilha): R$ ${dadosPlanilha.reduce((sum, r) => sum + r.valorCalculado, 0).toFixed(2)}</li>
                    <li>Valor total XML: R$ ${resultadosXML.reduce((sum, xml) => sum + xml.valorFrete, 0).toFixed(2)}</li>
                </ul>
            `;
            
            document.getElementById('resultadosContainer').innerHTML = html;
            
            // Mudar para a aba de resultados
            document.querySelector('.tab:nth-child(4)').click();
        }
    </script>
</body>
</html>
